#include <stdio.h>

// Structure to represent a process
struct Process {
    int processID;
    int burstTime;
};

// Function to perform non-preemptive SJF scheduling
void sjfScheduling(struct Process processes[], int n) {
    // Sort processes based on burst time (shortest job first)
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].burstTime > processes[j + 1].burstTime) {
                // Swap processes
                struct Process temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }

    int currentTime = 0;

    // Print the execution sequence and waiting time for each process
    printf("Execution Sequence:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d executes from %d to %d\n", processes[i].processID, currentTime, currentTime + processes[i].burstTime);
        currentTime += processes[i].burstTime;
    }
}

int main() {
    int n;

    // Get the number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Declare an array of processes
    struct Process processes[n];

    // Input process details
    for (int i = 0; i < n; i++) {
        printf("Enter details for Process %d:\n", i + 1);
        processes[i].processID = i + 1;
        printf("Enter burst time for Process %d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
    }

    // Perform non-preemptive SJF scheduling
    sjfScheduling(processes, n);

    return 0;
}
