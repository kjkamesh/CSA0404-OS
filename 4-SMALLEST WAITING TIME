#include <stdio.h>

struct Process {
    int process_id;
    int arrival_time;
    int burst_time;
    int waiting_time;
    int turnaround_time;
    int executed; // Flag to track whether the process has been executed or not
};

void calculateTimes(struct Process processes[], int n) {
    int total_waiting_time = 0;
    int total_turnaround_time = 0;

    // Calculate waiting time and turnaround time for each process
    for (int i = 0; i < n; i++) {
        processes[i].turnaround_time = processes[i].waiting_time + processes[i].burst_time;
        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }

    // Calculate average waiting time and average turnaround time
    float average_waiting_time = (float)total_waiting_time / n;
    float average_turnaround_time = (float)total_turnaround_time / n;

    // Display the results
    printf("\nProcess\t Arrival Time\t Burst Time\t Waiting Time\t Turnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t %d\t\t %d\t\t %d\t\t %d\n", processes[i].process_id,
               processes[i].arrival_time, processes[i].burst_time,
               processes[i].waiting_time, processes[i].turnaround_time);
    }

    printf("\nAverage Waiting Time: %.2f\n", average_waiting_time);
    printf("Average Turnaround Time: %.2f\n", average_turnaround_time);
}

void shortestJobFirst(struct Process processes[], int n) {
    int currentTime = 0;

    for (int i = 0; i < n; i++) {
        int shortestJobIndex = -1;
        int shortestBurstTime = -1;

        // Find the shortest job that has arrived and not yet executed
        for (int j = 0; j < n; j++) {
            if (processes[j].arrival_time <= currentTime && !processes[j].executed) {
                if (shortestJobIndex == -1 || processes[j].burst_time < shortestBurstTime) {
                    shortestJobIndex = j;
                    shortestBurstTime = processes[j].burst_time;
                }
            }
        }

        if (shortestJobIndex != -1) {
            // Execute the shortest job
            processes[shortestJobIndex].waiting_time = currentTime - processes[shortestJobIndex].arrival_time;
            currentTime += processes[shortestJobIndex].burst_time;
            processes[shortestJobIndex].turnaround_time = currentTime - processes[shortestJobIndex].arrival_time;
            processes[shortestJobIndex].executed = 1;
        } else {
            // No process is available, move to the next time unit
            currentTime++;
        }
    }
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    // Input process details
    for (int i = 0; i < n; i++) {
        processes[i].process_id = i + 1;

        printf("Enter arrival time for Process %d: ", i + 1);
        scanf("%d", &processes[i].arrival_time);

        printf("Enter burst time for Process %d: ", i + 1);
        scanf("%d", &processes[i].burst_time);

        processes[i].executed = 0;
    }

    // Sort processes based on arrival time
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].arrival_time > processes[j + 1].arrival_time) {
                // Swap the processes
                struct Process temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }

    // Run the shortest job first scheduling algorithm
    shortestJobFirst(processes, n);

    // Calculate waiting time and turnaround time and display the results
    calculateTimes(processes, n);

    return 0;
}
