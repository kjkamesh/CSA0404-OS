#include <stdio.h>

struct Process {
    int pid;        // Process ID
    int arrival;    // Arrival time
    int burst;      // Burst time
    int waiting;    // Waiting time
    int turnaround; // Turnaround time
};

void calculateTimes(struct Process processes[], int n) {
    int currentTime = 0;
    float totalWaiting = 0, totalTurnaround = 0;

    for (int i = 0; i < n; i++) {
        // Set waiting time for each process
        processes[i].waiting = currentTime - processes[i].arrival;

        // If the process arrives after the current time, update current time
        if (currentTime < processes[i].arrival)
            currentTime = processes[i].arrival;

        // Increment current time by burst time
        currentTime += processes[i].burst;

        // Set turnaround time for each process
        processes[i].turnaround = currentTime - processes[i].arrival;

        // Calculate total waiting and turnaround times
        totalWaiting += processes[i].waiting;
        totalTurnaround += processes[i].turnaround;
    }

    // Print the table header
    printf("PID\tArrival\tBurst\tWaiting\tTurnaround\n");

    // Print the details of each process
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\n", processes[i].pid, processes[i].arrival, processes[i].burst,
               processes[i].waiting, processes[i].turnaround);
    }

    // Print average waiting and turnaround times
    printf("\nAverage Waiting Time: %.2f\n", totalWaiting / n);
    printf("Average Turnaround Time: %.2f\n", totalTurnaround / n);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    printf("Enter arrival and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        processes[i].arrival = 0; // All processes start at time 0
        printf("Process %d:\n", i + 1);
        printf("Burst time: ");
        scanf("%d", &processes[i].burst);
    }

    calculateTimes(processes, n);

    return 0;
}
