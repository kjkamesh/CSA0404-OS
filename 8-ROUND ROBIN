#include <stdio.h>

// Structure to represent a process
struct Process {
    int processID;
    int arrivalTime;
    int burstTime;
    int remainingTime;
};

// Function to perform Round Robin scheduling
void roundRobinScheduling(struct Process processes[], int n, int timeQuantum) {
    int currentTime = 0;
    int completedProcesses = 0;

    // Process queue to store the index of processes
    int processQueue[n];

    // Initialize the process queue
    for (int i = 0; i < n; i++) {
        processQueue[i] = i;
    }

    // Iterate until all processes are completed
    while (completedProcesses < n) {
        for (int i = 0; i < n; i++) {
            int currentProcessIndex = processQueue[i];

            // Skip processes that have already completed
            if (processes[currentProcessIndex].remainingTime <= 0) {
                continue;
            }

            // Execute the process for the given time quantum or until completion
            int executionTime = (processes[currentProcessIndex].remainingTime < timeQuantum) ? processes[currentProcessIndex].remainingTime : timeQuantum;
            printf("Executing Process %d at time %d for %d units\n", processes[currentProcessIndex].processID, currentTime, executionTime);

            // Update remaining time and move to the next time unit
            processes[currentProcessIndex].remainingTime -= executionTime;
            currentTime += executionTime;

            // Check if the process has completed
            if (processes[currentProcessIndex].remainingTime <= 0) {
                completedProcesses++;
            }

            // Move the current process to the end of the queue
            for (int j = i; j < n - 1; j++) {
                processQueue[j] = processQueue[j + 1];
            }
            processQueue[n - 1] = currentProcessIndex;

            break; // Move to the next time unit
        }
    }
}

int main() {
    int n, timeQuantum;

    // Get the number of processes and time quantum
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    printf("Enter the time quantum for Round Robin: ");
    scanf("%d", &timeQuantum);

    // Declare an array of processes
    struct Process processes[n];

    // Input process details
    for (int i = 0; i < n; i++) {
        printf("Enter details for Process %d:\n", i + 1);
        processes[i].processID = i + 1;
        printf("Enter arrival time for Process %d: ", i + 1);
        scanf("%d", &processes[i].arrivalTime);
        printf("Enter burst time for Process %d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
        processes[i].remainingTime = processes[i].burstTime;
    }

    // Perform Round Robin scheduling
    roundRobinScheduling(processes, n, timeQuantum);

    return 0;
}
