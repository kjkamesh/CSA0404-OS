#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define PAGE_SIZE 4096
#define NUM_PAGES 1024
#define MEMORY_SIZE (PAGE_SIZE * NUM_PAGES)

// Page Table Entry
typedef struct {
    bool valid;
    int frame_number;
} PageTableEntry;

// Page Table
PageTableEntry page_table[NUM_PAGES];

// Physical Memory
char physical_memory[MEMORY_SIZE];

// Function to simulate reading data from disk
void read_from_disk(int page_number) {
    // Simulate reading data from disk into memory
    printf("Reading page %d from disk into memory\n", page_number);
    // Assume we read data into the next available frame
    page_table[page_number].frame_number = page_number;
    page_table[page_number].valid = true;
}

// Function to handle page fault
void handle_page_fault(int page_number) {
    if (!page_table[page_number].valid) {
        read_from_disk(page_number);
    }
}

// Function to simulate memory access
char read_memory(int virtual_address) {
    int page_number = virtual_address / PAGE_SIZE;
    int offset = virtual_address % PAGE_SIZE;

    if (page_number >= NUM_PAGES) {
        printf("Invalid virtual address\n");
        return -1;
    }

    if (!page_table[page_number].valid) {
        handle_page_fault(page_number);
    }

    int frame_number = page_table[page_number].frame_number;
    char* physical_address = &physical_memory[frame_number * PAGE_SIZE + offset];
    return *physical_address;
}

int main() {
    // Simulate accessing memory
    int virtual_address = 8192; // Example virtual address
    char data = read_memory(virtual_address);
    if (data != -1) {
        printf("Data at virtual address %d: %c\n", virtual_address, data);
    }

    return 0;
}